# -*- coding: utf-8 -*-
import db
import telebot
import messages
import cherrypy
from telebot import types
from states import State
import config


# –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –≤–µ–±—Ö—É–∫–æ–≤
WEBHOOK_HOST = '<your_host>'
WEBHOOK_PORT = 88  # 443, 80, 88 –∏–ª–∏ 8443 (–ø–æ—Ä—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –æ—Ç–∫—Ä—ã—Ç!)
WEBHOOK_LISTEN = '0.0.0.0'  # –ù–∞ –Ω–µ–∫–æ—Ç–æ—Ä—ã—Ö —Å–µ—Ä–≤–µ—Ä–∞—Ö –ø—Ä–∏–¥–µ—Ç—Å—è —É–∫–∞–∑—ã–≤–∞—Ç—å —Ç–∞–∫–æ–π –∂–µ IP, —á—Ç–æ –∏ –≤—ã—à–µ

# –ü—É—Ç—å –∫ —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–∞–º
WEBHOOK_SSL_CERT = './webhook_cert.pem'  # –ü—É—Ç—å –∫ —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç—É
WEBHOOK_SSL_PRIV = './webhook_pkey.pem'  # –ü—É—Ç—å –∫ –ø—Ä–∏–≤–∞—Ç–Ω–æ–º—É –∫–ª—é—á—É

# –ü—É—Ç—å –∫ –±–æ—Ç—É
WEBHOOK_URL_BASE = "https://%s:%s" % (WEBHOOK_HOST, WEBHOOK_PORT)
WEBHOOK_URL_PATH = "/%s/" % (config.token)

bot = telebot.TeleBot(config.token)
msg = messages.Message(bot, config.db_path)
db = db.DataBase(config.db_path, config.db_file)

# –í–µ–±—Ö—É–∫-—Å–µ—Ä–≤–µ—Ä
class WebhookServer(object):
    @cherrypy.expose
    def index(self):
        if 'content-length' in cherrypy.request.headers and \
                        'content-type' in cherrypy.request.headers and \
                        cherrypy.request.headers['content-type'] == 'application/json':
            length = int(cherrypy.request.headers['content-length'])
            json_string = cherrypy.request.body.read(length).decode("utf-8")
            update = telebot.types.Update.de_json(json_string)
            # –≠—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è –æ–±–µ—Å–ø–µ—á–∏–≤–∞–µ—Ç –ø—Ä–æ–≤–µ—Ä–∫—É –≤—Ö–æ–¥—è—â–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
            bot.process_new_updates([update])
            return ''
        else:
            raise cherrypy.HTTPError(403)



@bot.message_handler(commands=['start'], func=lambda message: db.get_state(message.chat.id) in [State.START.value, State.HELP.value, State.MENU.value, State.FINISH.value])
def get_start_message(message):
    """
    –í—ã–≤–æ–¥–∏–º —Å—Ç–∞—Ä—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    """
    msg.get_start(message)


@bot.message_handler(commands=['help'], func=lambda message: db.get_state(message.chat.id) in [State.START.value, State.HELP.value, State.MENU.value, State.FINISH.value])
def get_help_message(message):
    """
    –í—ã–≤–æ–¥–∏–º —Å–ø—Ä–∞–≤–∫—É –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    """
    msg.get_help(message)


@bot.message_handler(commands=['menu'], func=lambda message: db.get_state(message.chat.id) in [State.START.value, State.HELP.value, State.MENU.value, State.FINISH.value])
def get_menu_message(message):
    """
    –í—ã–≤–æ–¥–∏–º –º–µ–Ω—é –≤—ã–±–æ—Ä–∞
    """
    msg.get_menu(message)


@bot.message_handler(commands=['teacher'], func=lambda message: db.get_state(message.chat.id) in [State.START.value, State.HELP.value, State.MENU.value, State.FINISH.value])
def get_teacher_message(message):
    """
    –í—ã–≤–æ–¥–∏–º –∑–∞–ø—Ä–æ—Å –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è
    """
    msg.get_teacher_input(message)


@bot.message_handler(commands=['department'], func=lambda message: db.get_state(message.chat.id) in [State.START.value, State.HELP.value, State.MENU.value, State.FINISH.value])
def get_department_message(message):
    """
    –í—ã–≤–æ–¥–∏–º –∑–∞–ø—Ä–æ—Å –∫–∞—Ñ–µ–¥—Ä—ã
    """
    msg.get_department_input(message)


@bot.message_handler(commands=['subdivision'], func=lambda message: db.get_state(message.chat.id) in [State.START.value, State.HELP.value, State.MENU.value, State.FINISH.value])
def get_subdivision_message(message):
    """
    –í—ã–≤–æ–¥–∏–º –∑–∞–ø—Ä–æ—Å –ø–æ–¥—Ä–∞–∑–¥–µ–ª–µ–Ω–∏—è
    """
    msg.get_subdivision_input(message)


@bot.callback_query_handler(func=lambda call: db.get_state(call.message.chat.id) in [State.START.value, State.HELP.value, State.MENU.value, State.FINISH.value])
def callback_inline(call):
    """
    –í—ã–≤–æ–¥–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ, –∫–æ—Ç–æ—Ä–æ–µ –≤—ã–∑–≤–∞–Ω–æ –∏–∑ –≤—Å—Ç—Ä–æ–µ–Ω–Ω–æ–π –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
    """
    if call.data == "menu":
        msg.get_menu(call.message)
    elif call.data == "help":
        msg.get_help(call.message)
    elif call.data == "teachers":
        msg.get_teacher_input(call.message)
    elif call.data == "departments":
        msg.get_department_input(call.message)
    elif call.data == "subdivisions":
        msg.get_subdivision_input(call.message)


@bot.message_handler(func=lambda message: db.get_state(message.chat.id) in [State.MENU.value, State.HELP.value, State.FINISH.value], content_types=['text'])
def get_choice_menu_message(message):
    """
    –í—ã–≤–æ–¥–∏–º –æ–ø—Ä–µ–¥–µ–ª—ë–Ω–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ –º–µ–Ω—é
    """
    markup = types.ReplyKeyboardRemove(selective=False)

    if message.text == 'üóì':
        msg.get_schedule(message, markup)
    elif message.text == 'üë©‚Äçüíºüë®‚Äçüíº':
        msg.get_teacher_input(message, markup)
    elif message.text == 'üö™':
        msg.get_department_input(message, markup)
    elif message.text == 'üóÑ':
        msg.get_subdivision_input(message, markup)
    elif message.text == 'üç≤üåÆ':
        msg.get_buffet_input(message, markup)
    elif message.text == 'üñ®üìê':
        msg.get_store_input(message, markup)
    elif message.text == 'üìû':
        msg.get_feedback(message, markup)
    elif message.text == 'üìã':
        msg.get_help(message)
    else:
        msg.get_choice_error(message)


@bot.message_handler(func=lambda message: db.get_state(message.chat.id) == State.TEACHERS.value)
def get_teacher_message(message):
    """
    –í—ã–≤–æ–¥–∏–º –æ–ø—Ä–µ–¥–µ–ª—ë–Ω–Ω–æ–≥–æ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è
    """
    msg.get_teacher(message)


@bot.message_handler(func=lambda message: db.get_state(message.chat.id) == State.DEPARTMENTS.value)
def get_department_message(message):
    """
    –í—ã–≤–æ–¥–∏–º –æ–ø—Ä–µ–¥–µ–ª—ë–Ω–Ω—É—é –∫–∞—Ñ–µ–¥—Ä—É
    """
    msg.get_department(message)


@bot.message_handler(func=lambda message: db.get_state(message.chat.id) == State.SUBDIVISION.value)
def get_subdivision_message(message):
    """
    –í—ã–≤–æ–¥–∏–º –æ–ø—Ä–µ–¥–µ–ª—ë–Ω–Ω–æ–µ –ø–æ–¥—Ä–∞–∑–¥–µ–ª–µ–Ω–∏–µ
    """
    msg.get_subdivision(message)


@bot.message_handler(func=lambda message: db.get_state(message.chat.id) == State.BUFFETS.value)
def get_buffets_message(message):
    """
    –í—ã–≤–æ–¥–∏–º –ø–µ—Ä–≤—ã–π —Å–ª–∞–π–¥ –≥–∞–ª–µ—Ä–µ–∏
    """
    if message.text in ["1", "2", "3", "4", "5"]:
        msg.get_first_buffet(message)


@bot.callback_query_handler(func=lambda call: db.get_state(call.message.chat.id) == State.BUFFETS_GALLERY.value)
def callback_buffets(call):
    """
    –í—ã–≤–æ–¥–∏–º –æ–¥–∏–Ω –∏–∑ —Å–ª–∞–π–¥–æ–≤ –≥–∞–ª–µ—Ä–µ–∏
    """
    msg.get_buffets_gallery(call)



# –°–Ω–∏–º–∞–µ–º –≤–µ–±—Ö—É–∫ –ø–µ—Ä–µ–¥ –ø–æ–≤—Ç–æ—Ä–Ω–æ–π —É—Å—Ç–∞–Ω–æ–≤–∫–æ–π
bot.remove_webhook()

# –°—Ç–∞–≤–∏–º –≤–µ–±—Ö—É–∫
bot.set_webhook(url=WEBHOOK_URL_BASE + WEBHOOK_URL_PATH,
                certificate=open(WEBHOOK_SSL_CERT, 'r'))

# –£–∫–∞–∑—ã–≤–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–µ—Ä–≤–µ—Ä–∞ CherryPy
cherrypy.config.update({
    'server.socket_host': WEBHOOK_LISTEN,
    'server.socket_port': WEBHOOK_PORT,
    'server.ssl_module': 'builtin',
    'server.ssl_certificate': WEBHOOK_SSL_CERT,
    'server.ssl_private_key': WEBHOOK_SSL_PRIV
})

 # –ó–∞–ø—É—Å–∫ –≤–µ–±—Ö—É–∫-—Å–µ—Ä–≤–µ—Ä–∞
cherrypy.quickstart(WebhookServer(), WEBHOOK_URL_PATH, {'/': {}})