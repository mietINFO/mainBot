# -*- coding: utf-8 -*-
import config
from db import DataBase
from states import State
import functions as func
from telebot import types
import sqlite3


db = DataBase(config.db_path, config.db_file)

class Message:
    def __init__(self, bot, db_path):
        self.db_path = db_path
        self.bot = bot


    def get_start(self, message):
        """
        –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º —Å—Ç–∞—Ä—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        """
        db.set_state(message.chat.id, State.START.value)

        self.bot.send_message(message.chat.id,
                         func.message_wrapper({
                             'headline': '–ù–∞—á–∞–ª–æ —Ä–∞–±–æ—Ç—ã',
                             'text': '–ù–∞–∂–º–∏—Ç–µ /menu, —á—Ç–æ–±—ã –≤—ã–±—Ä–∞—Ç—å –ø–æ–¥—Ö–æ–¥—è—â–µ–µ –¥–µ–π—Å—Ç–≤–∏–µ.\n\r–ï—Å–ª–∏ —É –í–∞—Å –≤–æ–∑–Ω–∏–∫–Ω—É—Ç –≤–æ–ø—Ä–æ—Å—ã, –≤–≤–µ–¥–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É /help'}),
                         reply_markup=func.get_keyboard_inline_main(),
                         parse_mode="HTML")


    def get_help(self, message):
        """
        –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–º–æ—â–∏ (—Å–ø—Ä–∞–≤–∫–∏)
        """
        db.set_state(message.chat.id, State.HELP.value)

        # –î–æ–±–∞–≤–ª—è–µ–º –≤—Å—Ç—Ä–æ–µ–Ω–Ω—É—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–æ–π –º–µ–Ω—é
        keyboard = types.InlineKeyboardMarkup()
        button_menu = types.InlineKeyboardButton(text="–ü–µ—Ä–µ–π—Ç–∏ –≤ –º–µ–Ω—é", callback_data="menu")
        keyboard.add(button_menu)

        self.bot.send_message(message.chat.id,
                         func.message_wrapper({
                             'headline': '–°–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–æ–º–∞–Ω–¥',
                             'text': '<b>–û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:</b>\r\n'
                                     '/start - —Å—Ç–∞—Ä—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ\r\n'
                                     '/menu - –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é\r\n'
                                     '/help - —Å–ø—Ä–∞–≤–∫–∞ –ø–æ —Ä–∞–±–æ—Ç–µ —Å –±–æ—Ç–æ–º.\r\n\r\n'
                                     '<b>–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:</b>\r\n'
                                     '/teacher - –ø–æ–∏—Å–∫ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è\r\n'
                                     '/department - –ø–æ–∏—Å–∫ –∫–∞—Ñ–µ–¥—Ä—ã\r\n'
                                     '/subdivision - –ø–æ–∏—Å–∫ –ø–æ–¥—Ä–∞–∑–¥–µ–ª–µ–Ω–∏—è.'}),
                         reply_markup=keyboard,
                         parse_mode="HTML")


    def get_menu(self, message):
        """
        –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –æ—Å–Ω–æ–≤–Ω—ã–º –º–µ–Ω—é
        """
        db.set_state(message.chat.id, State.MENU.value)

        # –î–æ–±–∞–≤–ª—è–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –≤—ã–±–æ—Ä–æ–º –ø—É–Ω–∫—Ç–æ–≤ –º–µ–Ω—é
        markup = types.ReplyKeyboardMarkup()
        item_1 = types.KeyboardButton('üóì')
        item_2 = types.KeyboardButton('üë©‚Äçüíºüë®‚Äçüíº')
        item_3 = types.KeyboardButton('üö™')
        item_4 = types.KeyboardButton('üóÑ')
        item_5 = types.KeyboardButton('üç≤üåÆ')
        item_6 = types.KeyboardButton('üñ®üìê')
        item_7 = types.KeyboardButton('üìû')
        item_8 = types.KeyboardButton('üìã')
        markup.row(item_1, item_2, item_3, item_4)
        markup.row(item_5, item_6, item_7, item_8)

        self.bot.send_message(message.chat.id,
                              func.message_wrapper({
                                  'headline': '–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é',
                                  'text': '1. üóì –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ @Schedule_MIET_bot;\r\n'
                                  '2. üë©‚Äçüíºüë®‚Äçüíº —É–∑–Ω–∞—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª–µ;\r\n'
                                  '3. üö™ –Ω–∞–π—Ç–∏ –∫–∞—Ñ–µ–¥—Ä—É;\r\n'
                                  '4. üóÑ –Ω–∞–π—Ç–∏ –ø–æ–¥—Ä–∞–∑–¥–µ–ª–µ–Ω–∏–µ;\r\n'
                                  '5. üç≤üåÆ –Ω–∞–π—Ç–∏ —Å—Ç–æ–ª–æ–≤—É—é –∏–ª–∏ –±—É—Ñ–µ—Ç –ø–æ–±–ª–∏–∑–æ—Å—Ç–∏;\r\n'
                                  '6. üñ®üìê –Ω–∞–π—Ç–∏ –º–∞–≥–∞–∑–∏–Ω –∫–∞–Ω—Ü—Ç–æ–≤–∞—Ä–æ–≤ –∏–ª–∏ –∫–∏–æ—Å–∫, –≥–¥–µ –º–æ–∂–Ω–æ —Ä–∞—Å–ø–µ—á–∞—Ç–∞—Ç—å –¥–æ–∫—É–º–µ–Ω—Ç—ã;\r\n'
                                  '7. üìû —Å–æ–æ–±—â–∏—Ç—å –æ –ø—Ä–æ–±–ª–µ–º–µ –∏–ª–∏ –∑–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å;\r\n'
                                  '8. üìã —Å–ø—Ä–∞–≤–∫–∞ –ø–æ —Ä–∞–±–æ—Ç–µ —Å –±–æ—Ç–æ–º /help.\r\n\r\n'
                                  '–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–¥—Ö–æ–¥—è—â–µ–µ –¥–µ–π—Å—Ç–≤–∏–µ:'
                              }),
                              reply_markup=markup,
                              parse_mode="HTML")


    def get_schedule(self, message, markup):
        """
        –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–∏ –∑–∞–Ω—è—Ç–∏–π
        """
        db.set_state(message.chat.id, State.SCHEDULE.value)

        self.bot.send_message(message.chat.id,
                              func.message_wrapper({
                                  'headline': '–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –∑–∞–Ω—è—Ç–∏–π',
                                  'text': '–í—ã –º–æ–∂–µ—Ç–µ —É–∑–Ω–∞—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –∑–∞–Ω—è—Ç–∏–π –¥–ª—è —Å–≤–æ–µ–π –≥—Ä—É–ø–ø—ã –¥–≤—É–º—è —Å–ø–æ—Å–æ–±–∞–º–∏:'}),
                              reply_markup=markup,
                              parse_mode="HTML")

        self.bot.send_message(message.chat.id,
                              func.message_wrapper({
                                  'text': '1. –≤–æ—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è —Å—Ç–æ—Ä–æ–Ω–Ω–∏–º –±–æ—Ç–æ–º: @Schedule_MIET_bot\n\r'
                                          '2. –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –Ω–∞ —Å–∞–π—Ç–µ –ú–ò–≠–¢–∞: http://miet.ru/schedule'
                              }),
                             reply_markup=func.get_keyboard_inline_main(),
                              parse_mode="HTML")

        db.set_state(message.chat.id, State.FINISH.value)


    def get_teacher_input(self, message, markup = None):
        """
        –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –ø—Ä–æ—Å—å–±–æ–π –æ –≤–≤–æ–¥–µ –¥–∞–Ω–Ω—ã—Ö –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è
        """
        db.set_state(message.chat.id, State.TEACHERS.value)

        if markup is not None:
            self.bot.send_message(message.chat.id,
                                  func.message_wrapper({
                                      'headline': '–ü–æ–∏—Å–∫ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è',
                                      'text': '–í–≤–µ–¥–∏—Ç–µ —Ñ–∞–º–∏–ª–∏—é, –§–ò –∏–ª–∏ –§–ò–û –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è:'
                                  }),
                                  reply_markup=markup,
                                  parse_mode="HTML")
        else:
            self.bot.send_message(message.chat.id,
                                  func.message_wrapper({
                                      'headline': '–ü–æ–∏—Å–∫ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è',
                                      'text': '–í–≤–µ–¥–∏—Ç–µ —Ñ–∞–º–∏–ª–∏—é, –§–ò –∏–ª–∏ –§–ò–û –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è:'
                                  }),
                                  parse_mode="HTML")


    def get_department_input(self, message, markup = None):
        """
        –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –ø—Ä–æ—Å—å–±–æ–π –æ –≤–≤–æ–¥–µ –∞–±–±—Ä–µ–≤–∏–∞—Ç—É—Ä—ã –∫–∞—Ñ–µ–¥—Ä—ã
        """
        db.set_state(message.chat.id, State.DEPARTMENTS.value)
        db_d = sqlite3.connect(self.db_path + 'departments.db')

        cursor = db_d.cursor()
        cursor.execute("SELECT * FROM departments")
        data = cursor.fetchall()

        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–∞—Ñ–µ–¥—Ä
        i = 1
        subdivisions = ''
        for row in data:
            subdivisions += str(i) + '. ' + row[1] + '\r\n'
            i += 1


        if markup is not None:
            self.bot.send_message(chat_id=message.chat.id,
                                  text=func.message_wrapper({
                                      'headline': '–ü–æ–∏—Å–∫ –∫–∞—Ñ–µ–¥—Ä—ã',
                                      'text': '–í –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –¥–æ–±–∞–≤–ª–µ–Ω—ã —Å–ª–µ–¥—É—é—â–∏–µ –∫–∞—Ñ–µ–¥—Ä—ã –ú–ò–≠–¢–∞:\r\n\r\n' + subdivisions + '\r\n'
                                                                                                                            '–í–≤–µ–¥–∏—Ç–µ –∞–±–±—Ä–µ–≤–∏–∞—Ç—É—Ä—É –∫–∞—Ñ–µ–¥—Ä—ã, –∫–æ—Ç–æ—Ä–∞—è —É–∫–∞–∑–∞–Ω–∞ –≤—ã—à–µ (–ù–∞–ø—Ä–∏–º–µ—Ä, –í–ú-2):'
                                  }),
                                  reply_markup=markup,
                                  parse_mode="HTML")
        else:
            self.bot.send_message(chat_id=message.chat.id,
                                  text=func.message_wrapper({
                                      'headline': '–ü–æ–∏—Å–∫ –∫–∞—Ñ–µ–¥—Ä—ã',
                                      'text': '–í –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –¥–æ–±–∞–≤–ª–µ–Ω—ã —Å–ª–µ–¥—É—é—â–∏–µ –∫–∞—Ñ–µ–¥—Ä—ã –ú–ò–≠–¢–∞:\r\n\r\n' + subdivisions + '\r\n'
                                                                                                                            '–í–≤–µ–¥–∏—Ç–µ –∞–±–±—Ä–µ–≤–∏–∞—Ç—É—Ä—É –∫–∞—Ñ–µ–¥—Ä—ã, –∫–æ—Ç–æ—Ä–∞—è —É–∫–∞–∑–∞–Ω–∞ –≤—ã—à–µ (–ù–∞–ø—Ä–∏–º–µ—Ä, –í–ú-2):'
                                  }),
                                  parse_mode="HTML")



    def get_department(self, message, markup = None):
        """
        –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–∞—Ñ–µ–¥—Ä–µ –∏–Ω—Å—Ç–∏—Ç—É—Ç–∞
        """
        db_d = sqlite3.connect(self.db_path + 'departments.db')

        cursor = db_d.cursor()
        department_name = [message.text.upper()]

        cursor.execute("SELECT * FROM departments WHERE cipher = ?", department_name)
        data = cursor.fetchone()

        if data is None:
            self.bot.send_message(chat_id=message.chat.id,
                                  text=func.message_wrapper({
                                      'headline': '–ü–æ–∏—Å–∫ –∫–∞—Ñ–µ–¥—Ä—ã',
                                      'text': '–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –∫–∞—Ñ–µ–¥—Ä—ã —Å —Ç–∞–∫–∏–º –Ω–∞–∑–≤–∞–Ω–∏–µ–º –Ω–µ—Ç –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö!'
                                  }),
                                  reply_markup=func.get_keyboard_inline_departments(),
                                  parse_mode="HTML")
        else:
            self.bot.send_message(chat_id=message.chat.id,
                                  text=func.message_wrapper({
                                      'text': '<b>–ö–∞—Ñ–µ–¥—Ä–∞:</b> ' + data[1] + '\r\n'
                                      '<b>–ê—É–¥–∏—Ç–æ—Ä–∏—è:</b> ' + data[5] + '\r\n'
                                      '<b>–¢–µ–ª–µ—Ñ–æ–Ω:</b> ' + data[3] + '\r\n'
                                      '<b>E-mail:</b> ' + data[6] + '\r\n'
                                      '<b>–ü–æ–¥—Ä–æ–±–Ω–µ–µ:</b> ' + data[7] + '\r\n'
                                  }),
                                  reply_markup=func.get_keyboard_inline_departments(),
                                  parse_mode="HTML")

        db.set_state(message.chat.id, State.FINISH.value)


    def get_subdivision_input(self, message, markup = None):
        """
        –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –ø—Ä–æ—Å—å–±–æ–π –æ –≤–≤–æ–¥–µ –∞–±–±—Ä–µ–≤–∏–∞—Ç—É—Ä—ã –ø–æ–¥—Ä–∞–∑–¥–µ–ª–µ–Ω–∏—è
        """
        db.set_state(message.chat.id, State.SUBDIVISION.value)
        db_s = sqlite3.connect(self.db_path + 'subdivisions.db')

        cursor = db_s.cursor()
        cursor.execute("SELECT * FROM subdivisions")
        data = cursor.fetchall()

        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –ø–æ–¥—Ä–∞–∑–¥–µ–ª–µ–Ω–∏–π
        i = 1
        subdivisions = ''
        for row in data:
            subdivisions += str(i) + '. ' + row[1] + '\r\n'
            i += 1


        if markup is not None:
            self.bot.send_message(chat_id=message.chat.id,
                                  text=func.message_wrapper({
                                      'headline': '–ü–æ–∏—Å–∫ –ø–æ–¥—Ä–∞–∑–¥–µ–ª–µ–Ω–∏–π',
                                      'text': '–í –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –¥–æ–±–∞–≤–ª–µ–Ω—ã —Å–ª–µ–¥—É—é—â–∏–µ –ø–æ–¥—Ä–∞–∑–¥–µ–ª–µ–Ω–∏—è –ú–ò–≠–¢–∞:\r\n\r\n' + subdivisions + '\r\n'
                                                                                                                                  '–í–≤–µ–¥–∏—Ç–µ –∞–±–±—Ä–µ–≤–∏–∞—Ç—É—Ä—É –ø–æ–¥—Ä–∞–∑–¥–µ–ª–µ–Ω–∏—è, –∫–æ—Ç–æ—Ä–∞—è —É–∫–∞–∑–∞–Ω–∞ –≤—ã—à–µ (–ù–∞–ø—Ä–∏–º–µ—Ä, –î–û–°–£–ü):'
                                  }),
                                  reply_markup=markup,
                                  parse_mode="HTML")
        else:
            self.bot.send_message(chat_id=message.chat.id,
                                  text=func.message_wrapper({
                                      'headline': '–ü–æ–∏—Å–∫ –ø–æ–¥—Ä–∞–∑–¥–µ–ª–µ–Ω–∏–π',
                                      'text': '–í –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –¥–æ–±–∞–≤–ª–µ–Ω—ã —Å–ª–µ–¥—É—é—â–∏–µ –ø–æ–¥—Ä–∞–∑–¥–µ–ª–µ–Ω–∏—è –ú–ò–≠–¢–∞:\r\n\r\n' + subdivisions + '\r\n'
                                                                                                                                  '–í–≤–µ–¥–∏—Ç–µ –∞–±–±—Ä–µ–≤–∏–∞—Ç—É—Ä—É –ø–æ–¥—Ä–∞–∑–¥–µ–ª–µ–Ω–∏—è, –∫–æ—Ç–æ—Ä–∞—è —É–∫–∞–∑–∞–Ω–∞ –≤—ã—à–µ (–ù–∞–ø—Ä–∏–º–µ—Ä, –î–û–°–£–ü):'
                                  }),
                                  parse_mode="HTML")


    def get_subdivision(self, message):
        """
        –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–¥—Ä–∞–∑–¥–µ–ª–µ–Ω–∏–∏ –∏–Ω—Å—Ç–∏—Ç—É—Ç–∞
        """
        db_s = sqlite3.connect(self.db_path + 'subdivisions.db')

        cursor = db_s.cursor()
        subdivision_name = [message.text.upper()]

        cursor.execute("SELECT * FROM subdivisions WHERE cipher = ?", subdivision_name)
        data = cursor.fetchone()

        if data is None:
            self.bot.send_message(chat_id=message.chat.id,
                                  text=func.message_wrapper({
                                      'headline': '–ü–æ–∏—Å–∫ –ø–æ–¥—Ä–∞–∑–¥–µ–ª–µ–Ω–∏—è',
                                      'text': '–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –ø–æ–¥—Ä–∞–∑–¥–µ–ª–µ–Ω–∏–π —Å —Ç–∞–∫–∏–º –Ω–∞–∑–≤–∞–Ω–∏–µ–º –Ω–µ—Ç –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö!'
                                  }),
                                  reply_markup=func.get_keyboard_inline_subdivisions(),
                                  parse_mode="HTML")
        else:
            self.bot.send_message(chat_id=message.chat.id,
                                  text=func.message_wrapper({
                                      'headline': '–ü–æ–∏—Å–∫ –ø–æ–¥—Ä–∞–∑–¥–µ–ª–µ–Ω–∏—è',
                                      'text': '<b>–ü–æ–¥—Ä–∞–∑–¥–µ–ª–µ–Ω–∏–µ:</b> ' + data[1] + '\r\n'
                                              '<b>–†—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª—å:</b> ' + data[3] + '\r\n'
                                              '<b>–ê—É–¥–∏—Ç–æ—Ä–∏—è:</b> ' + data[5] + '\r\n'
                                              '<b>–¢–µ–ª–µ—Ñ–æ–Ω:</b> ' + data[4] + '\r\n'
                                              '<b>Email:</b> ' + data[6] + '\r\n'
                                              '<b>–ü–æ–¥—Ä–æ–±–Ω–µ–µ:</b> ' + data[7]
                                  }),
                                  reply_markup=func.get_keyboard_inline_subdivisions(),
                                  parse_mode="HTML")

        db.set_state(message.chat.id, State.FINISH.value)


    def get_buffet_input(self, message, markup):
        """
        –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –ø—Ä–æ—Å—å–±–æ–π –æ –≤–≤–æ–¥–µ –∫–æ—Ä–ø—É—Å–∞, –≤ –∫–æ—Ç–æ—Ä–æ–º –æ–Ω —Å–µ–π—á–∞—Å –Ω–∞—Ö–æ–¥–∏—Ç—Å—è
        """
        db.set_state(message.chat.id, State.BUFFETS.value)

        self.bot.send_photo(message.chat.id,
                            open('images/other/miet.jpg', 'rb'),
                            caption="–°—Ö–µ–º–∞ —Ä–∞—Å–ø–æ–ª–æ–∂–µ–Ω–∏—è –∫–æ—Ä–ø—É—Å–æ–≤ ¬´–ú–ò–≠–¢¬ª",
                            reply_markup=markup)

        # –î–æ–±–∞–≤–ª—è–µ–º –æ—Å–Ω–æ–≤–Ω—É—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
        markup = types.ReplyKeyboardMarkup()
        item_1 = types.KeyboardButton('1')
        item_2 = types.KeyboardButton('2')
        item_3 = types.KeyboardButton('3')
        item_4 = types.KeyboardButton('4')
        item_5 = types.KeyboardButton('5')
        markup.row(item_1, item_2, item_3, item_4, item_5)

        self.bot.send_message(message.chat.id,
                              func.message_wrapper({
                                  'headline': '–ü–æ–∏—Å–∫ —Å—Ç–æ–ª–æ–≤–æ–π –∏–ª–∏ –±—É—Ñ–µ—Ç–∞',
                                  'text': '–í—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–º–µ—Ä –∫–æ—Ä–ø—É—Å–∞, –≤ –∫–æ—Ç–æ—Ä–æ–º –í—ã –Ω–∞—Ö–æ–¥–∏—Ç–µ—Å—å —Å–µ–π—á–∞—Å –∏–ª–∏ –ø–æ–±–ª–∏–∑–æ—Å—Ç–∏:'}),
                              reply_markup=markup,
                              parse_mode="HTML")


    def get_first_buffet(self, message):
        """
        –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø–µ—Ä–≤—ã–π —Å–ª–∞–π–¥ –≥–∞–ª–µ—Ä–µ–∏
        """
        row = db.get_buffets(int(message.text), 1)
        next_button_text = message.text + "_2"

        markup = types.ReplyKeyboardRemove()
        keyboard = types.InlineKeyboardMarkup()
        button_menu = types.InlineKeyboardButton(text="–ü–µ—Ä–µ–π—Ç–∏ –≤ –º–µ–Ω—é", callback_data="menu")
        button_next = types.InlineKeyboardButton(text=">", callback_data=next_button_text)
        keyboard.add(button_menu, button_next)

        current_photo = 'images/buffets/' + str(row[2]) + '.jpg'
        self.bot.send_photo(message.chat.id,
                            open(current_photo, 'rb'),
                            reply_markup=markup,
                            caption=row[4])

        self.bot.send_message(chat_id=message.chat.id,
                              text=func.message_wrapper({
                              'text': '<b>–ú–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ:</b> ' + row[4] + '.\r\n'
                                      '<b>–ì—Ä–∞—Ñ–∏–∫ —Ä–∞–±–æ—Ç—ã:</b> ' + row[5] + '.'
                              }),
                              reply_markup=keyboard,
                              parse_mode="HTML")

        db.set_state(message.chat.id, State.BUFFETS_GALLERY.value)


    def get_store_input(self, message, markup):
        """
        –í–æ–∑–≤—Ä–∞—â–∞–µ–º –º–∞–≥–∞–∑–∏–Ω—ã –∫–∞–Ω—Ü—Ç–æ–≤–∞—Ä–æ–≤
        """
        db.set_state(message.chat.id, State.STORES.value)

        self.bot.send_photo(message.chat.id,
                            open('images/other/miet.jpg', 'rb'),
                            caption="–°—Ö–µ–º–∞ —Ä–∞—Å–ø–æ–ª–æ–∂–µ–Ω–∏—è –∫–æ—Ä–ø—É—Å–æ–≤ ¬´–ú–ò–≠–¢¬ª",
                            reply_markup=markup)

        self.bot.send_message(message.chat.id,
                              func.message_wrapper({
                                  'headline': '–ú–∞–≥–∞–∑–∏–Ω—ã –∫–∞–Ω—Ü—Ç–æ–≤–∞—Ä–æ–≤',
                                  'text': '–ù–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –¥–µ–π—Å—Ç–≤—É–µ—Ç —Ç–æ–ª—å–∫–æ –æ–¥–∏–Ω –º–∞–≥–∞–∑–∏–Ω –∫–∞–Ω—Ü—Ç–æ—Ä–≤–∞—Ä–æ–≤, –≤ –∫–æ—Ç–æ—Ä–æ–º –í—ã —Ç–∞–∫–∂–µ –º–æ–∂–µ—Ç–µ —Ä–∞—Å–ø–µ—á–∞—Ç–∞—Ç—å –Ω—É–∂–Ω—ã–µ –¥–æ–∫—É–º–µ–Ω—Ç—ã!'}),
                              reply_markup=markup,
                              parse_mode="HTML")

        self.bot.send_photo(message.chat.id,
                            open("images/stores/1.jpg", "rb"),
                            caption="–ù–∞ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω –º–∞–≥–∞–∑–∏–Ω –∫–∞–Ω—Ü–µ–ª—è—Ä—Å–∫–∏—Ö —Ç–æ–≤–∞—Ä–æ–≤")

        self.bot.send_message(message.chat.id,
                              text=func.message_wrapper({
                                  'text': '<b>–ú–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ:</b> 3 –∫–æ—Ä–ø—É—Å, 2 —ç—Ç–∞–∂, –æ–∫–æ–ª–æ –≥–ª–∞–≤–Ω–æ–π –ª–µ—Å—Ç–Ω–∏—Ü—ã\r\n'
                                          '<b>–í–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏:</b> –º–æ–∂–Ω–æ –ø—Ä–∏–æ–±—Ä–µ—Å—Ç–∏ –∫–∞–Ω—Ü–µ–ª—è—Ä—Å–∫–∏–µ —Ç–æ–≤–∞—Ä—ã –∏–ª–∏ —Ä–∞—Å–ø–µ—á–∞—Ç–∞—Ç—å –¥–æ–∫—É–º–µ–Ω—Ç—ã\r\n'
                                          '<b>–í—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã:</b> –ø–Ω. ‚Äî –ø—Ç.: 10:00 ‚Äî 15:00'
                              }),
                              reply_markup=func.get_keyboard_inline_main(),
                              parse_mode="HTML")

        db.set_state(message.chat.id, State.FINISH.value)


    def get_feedback(self, message, markup):
        """
        –í–æ–∑–≤—Ä–∞—â–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏
        """
        db.set_state(message.chat.id, State.FEEDBACK.value)

        self.bot.send_message(message.chat.id,
                              func.message_wrapper({
                                  'headline': '–û–±—Ä–∞—Ç–Ω–∞—è —Å–≤—è–∑—å',
                                  'text': '–í—ã –º–æ–∂–µ—Ç–µ —Å–æ–æ–±—â–∏—Ç—å –Ω–∞–º –æ –≤–æ–∑–Ω–∏–∫—à–µ–π —É –í–∞—Å –ø—Ä–æ–±–ª–µ–º–µ –∏–ª–∏ –∑–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å –∫–∞—Å–∞—Ç–µ–ª—å–Ω–æ —Ä–∞–±–æ—Ç—ã —ç—Ç–æ–≥–æ –±–æ—Ç–∞!'}),
                              reply_markup=markup,
                              parse_mode="HTML")

        self.bot.send_message(message.chat.id,
                              func.message_wrapper({
                                  'text': '–î–ª—è —ç—Ç–æ–≥–æ –≤–æ—Å–ø–æ–ª—å–∑—É–π—Ç–µ—Å—å –¥—Ä—É–≥–∏–º –Ω–∞—à–∏–º –±–æ—Ç–æ–º: @mietINFO_feedback_bot'}),
                              reply_markup=func.get_keyboard_inline_main(),
                              parse_mode="HTML")

        db.set_state(message.chat.id, State.FINISH.value)


    def get_choice_error(self, message):
        """
        –í–æ–∑–≤—Ä–∞—â–∞–µ–º –æ—à–∏–±–∫—É –≤—ã–±–æ—Ä–∞, –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–∂–∞–ª –Ω–∞ –∫–Ω–æ–ø–∫—É
        """
        self.bot.send_message(message.chat.id,
                              func.message_wrapper({
                                  'headline': '–í—ã–±–æ—Ä –¥–µ–π—Å—Ç–≤–∏—è',
                                  'text': '–í—ã –Ω–µ –≤—ã–±—Ä–∞–ª–∏ –Ω–∏ –æ–¥–Ω–æ–≥–æ –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö –¥–µ–π—Å—Ç–≤–∏–π!\r\n'
                                          '–ù–∞–∂–º–∏—Ç–µ –Ω–∞ –æ–¥–Ω—É –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö –∫–Ω–æ–ø–æ–∫:'}),
                              parse_mode="HTML")


    def get_teacher(self, message):
        db_t = sqlite3.connect(self.db_path + 'teachers.db')
        cursor = db_t.cursor()

        teacher_name = message.text.lower().title()
        cursor.execute("SELECT * FROM teachers WHERE name LIKE ?", ('%{}%'.format(teacher_name),))
        data = cursor.fetchall()

        cursor.execute("SELECT COUNT(*) FROM teachers WHERE name LIKE ?", ('%{}%'.format(teacher_name),))
        count = cursor.fetchone()

        i = 0
        for row in data:
            name = row[1] if row[1] is not None else '–Ω–µ —É–∫–∞–∑–∞–Ω–æ'
            department = row[2] if row[2] is not None else '–Ω–µ —É–∫–∞–∑–∞–Ω–æ'
            occupation = row[3] if row[3] is not None else '–Ω–µ —É–∫–∞–∑–∞–Ω–∞'
            place = row[4] if row[4] is not None else '–Ω–µ —É–∫–∞–∑–∞–Ω–∞'
            phone = row[5] if row[5] is not None else '–Ω–µ —É–∫–∞–∑–∞–Ω'
            mail = row[6] if row[6] is not None else '–Ω–µ —É–∫–∞–∑–∞–Ω'
            link = row[7] if row[7] is not None else '–Ω–µ —É–∫–∞–∑–∞–Ω–æ'
            photo = row[8]


            if photo is not None or requests.head(photo) == 200:
                self.bot.send_photo(chat_id=message.chat.id,
                                photo=photo)

            self.bot.send_message(chat_id=message.chat.id,
                              text=func.message_wrapper({
                                  'text': '<b>–§–ò–û:</b> ' + name + '\r\n'
                                          '<b>–ü–æ–¥—Ä–∞–∑–¥–µ–ª–µ–Ω–∏–µ:</b> ' + department + '\r\n'
                                          '<b>–î–æ–ª–∂–Ω–æ—Å—Ç—å:</b> ' + occupation + '\r\n'
                                          '<b>–ê—É–¥–∏—Ç–æ—Ä–∏—è:</b> ' + place + '\r\n'
                                          '<b>–¢–µ–ª–µ—Ñ–æ–Ω:</b> ' + phone + '\r\n'
                                          '<b>E-mail:</b> ' + mail + '\r\n'
                                          '<b>–ü–æ–¥—Ä–æ–±–Ω–µ–µ:</b> ' + link
                              }),
                              reply_markup=func.get_keyboard_inline_teachers() if i == (count[0] - 1) else False,
                              parse_mode="HTML")

            i += 1


        if count[0] == 0:
            self.bot.send_message(chat_id=message.chat.id,
                                  text=func.message_wrapper({
                                      'headline': '–ü–æ–∏—Å–∫ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è',
                                      'text': '–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è —Å —Ç–∞–∫–∏–º–∏ –∏–Ω–∏—Ü–∏–∞–ª–∞–º–∏ –Ω–µ—Ç –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö!'
                                  }),
                                  reply_markup=func.get_keyboard_inline_teachers(),
                                  parse_mode="HTML")

        db.set_state(message.chat.id, State.FINISH.value)


    def get_buffets_gallery(self, call):
        """
        –í–æ–∑–≤—Ä–∞—â–∞–µ–º –Ω–æ–≤—ã–π —Å–ª–∞–π–¥ –≥–∞–ª–µ—Ä–µ–∏ –∏–ª–∏ –º–µ–Ω—é –≤—ã–±–æ—Ä–∞
        """
        if call.data == "menu":
            self.get_menu(call.message)
        else:
            self.bot.delete_message(chat_id=call.message.chat.id,
                               message_id=call.message.message_id - 1)

            self.bot.delete_message(chat_id=call.message.chat.id,
                               message_id=call.message.message_id)

            key = call.data.split("_")
            prev_button_text = key[0] + "_" + str(int(key[1]) - 1)
            next_button_text = key[0] + "_" + str(int(key[1]) + 1)

            row = db.get_buffets(int(key[0]), int(key[1]))

            markup = types.ReplyKeyboardRemove()
            keyboard = types.InlineKeyboardMarkup()
            if prev_button_text:
                button_prev = types.InlineKeyboardButton(text="<", callback_data=prev_button_text)

            if next_button_text:
                button_next = types.InlineKeyboardButton(text=">", callback_data=next_button_text)

            button_menu = types.InlineKeyboardButton(text="–ü–µ—Ä–µ–π—Ç–∏ –≤ –º–µ–Ω—é", callback_data="menu")

            if int(key[1]) > 1 and int(key[1]) < (db.get_buffets_count(int(key[0]))[0] - 1):
                keyboard.add(button_prev, button_menu, button_next)
            elif int(key[1]) == 1:
                keyboard.add(button_menu, button_next)
            elif int(key[1]) == (db.get_buffets_count(int(key[0]))[0] - 1):
                keyboard.add(button_prev, button_menu)
            else:
                keyboard.add(button_menu)

            current_photo = 'images/buffets/' + str(row[2]) + '.jpg'
            self.bot.send_photo(call.message.chat.id,
                           open(current_photo, 'rb'),
                           reply_markup=markup,
                           caption=row[3])

            self.bot.send_message(chat_id=call.message.chat.id,
                             text=func.message_wrapper({
                                 'text': '<b>–ú–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ:</b> ' + row[4] + '\r\n'
                                         '<b>–ì—Ä–∞—Ñ–∏–∫ —Ä–∞–±–æ—Ç—ã:</b> ' + row[5] + ''
                             }),
                             reply_markup=keyboard,
                             parse_mode="HTML")